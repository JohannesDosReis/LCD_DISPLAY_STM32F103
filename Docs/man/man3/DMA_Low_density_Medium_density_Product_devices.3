.TH "DMA_Low_density_Medium_density_Product_devices" 3 "Thu Oct 29 2020" "lcd_display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DMA_Low_density_Medium_density_Product_devices
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__HAL_DMA_GET_TC_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Returns the current DMA Channel transfer complete flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_HT_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Channel half transfer complete flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_TE_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Channel transfer error flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_GI_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Channel Global interrupt flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_FLAG\fP(__HANDLE__,  __FLAG__)   (\fBDMA1\fP\->ISR & (__FLAG__))"
.br
.RI "Get the DMA Channel pending flags\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_CLEAR_FLAG\fP(__HANDLE__,  __FLAG__)   (\fBDMA1\fP\->IFCR = (__FLAG__))"
.br
.RI "Clear the DMA Channel pending flags\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define __HAL_DMA_CLEAR_FLAG(__HANDLE__, __FLAG__)   (\fBDMA1\fP\->IFCR = (__FLAG__))"

.PP
Clear the DMA Channel pending flags\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>HANDLE</strong>\fP DMA handle 
.br
\fI<strong>FLAG</strong>\fP specifies the flag to clear\&. This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
DMA_FLAG_TCx: Transfer complete flag 
.IP "\(bu" 2
DMA_FLAG_HTx: Half transfer complete flag 
.IP "\(bu" 2
DMA_FLAG_TEx: Transfer error flag 
.IP "\(bu" 2
DMA_FLAG_GLx: Global interrupt flag Where x can be 1_7 to select the DMA Channel flag\&. 
.br
 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_DMA_GET_FLAG(__HANDLE__, __FLAG__)   (\fBDMA1\fP\->ISR & (__FLAG__))"

.PP
Get the DMA Channel pending flags\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>HANDLE</strong>\fP DMA handle 
.br
\fI<strong>FLAG</strong>\fP Get the specified flag\&. This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
DMA_FLAG_TCx: Transfer complete flag 
.IP "\(bu" 2
DMA_FLAG_HTx: Half transfer complete flag 
.IP "\(bu" 2
DMA_FLAG_TEx: Transfer error flag 
.IP "\(bu" 2
DMA_FLAG_GLx: Global interrupt flag Where x can be 1_7 to select the DMA Channel flag\&. 
.br
 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP state of FLAG (SET or RESET)\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)"
\fBValue:\fP
.PP
.nf
(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_GL1 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_GL2 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_GL3 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_GL4 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_GL5 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_GL6 :\
   DMA_FLAG_GL7)
.fi
.PP
Return the current DMA Channel Global interrupt flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>HANDLE</strong>\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP specified transfer error flag index\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)"
\fBValue:\fP
.PP
.nf
(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_HT5 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_HT6 :\
   DMA_FLAG_HT7)
.fi
.PP
Return the current DMA Channel half transfer complete flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>HANDLE</strong>\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP specified half transfer complete flag index\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__)"
\fBValue:\fP
.PP
.nf
(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TC5 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TC6 :\
   DMA_FLAG_TC7)
.fi
.PP
Returns the current DMA Channel transfer complete flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>HANDLE</strong>\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP specified transfer complete flag index\&. 
.RE
.PP

.SS "#define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)"
\fBValue:\fP
.PP
.nf
(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TE5 :\
 ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TE6 :\
   DMA_FLAG_TE7)
.fi
.PP
Return the current DMA Channel transfer error flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>HANDLE</strong>\fP DMA handle 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP specified transfer error flag index\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for lcd_display from the source code\&.
