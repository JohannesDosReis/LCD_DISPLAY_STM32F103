.TH "FLASH_Interrupt" 3 "Thu Oct 29 2020" "lcd_display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FLASH_Interrupt \- macros to handle FLASH interrupts  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__HAL_FLASH_ENABLE_IT\fP(__INTERRUPT__)   (\fBFLASH\fP\->CR |= (__INTERRUPT__))"
.br
.RI "Enable the specified FLASH interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_DISABLE_IT\fP(__INTERRUPT__)   (\fBFLASH\fP\->CR &= ~(__INTERRUPT__))"
.br
.RI "Disable the specified FLASH interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_GET_FLAG\fP(__FLAG__)"
.br
.RI "Get the specified FLASH flag status\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_CLEAR_FLAG\fP(__FLAG__)"
.br
.RI "Clear the specified FLASH flag\&. "
.in -1c
.SH "Detailed Description"
.PP 
macros to handle FLASH interrupts 


.SH "Macro Definition Documentation"
.PP 
.SS "#define __HAL_FLASH_CLEAR_FLAG(__FLAG__)"
\fBValue:\fP
.PP
.nf
do { \
                          /* Clear FLASH_FLAG_OPTVERR flag */ \
                          if ((__FLAG__) == FLASH_FLAG_OPTVERR) \
                          { \
                            CLEAR_BIT(FLASH->OBR, FLASH_OBR_OPTERR); \
                          } \
                          else { \
                            /* Clear Flag in Bank1 */ \
                            FLASH->SR  = (__FLAG__); \
                          } \
                    } while(0U)
.fi
.PP
Clear the specified FLASH flag\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>FLAG</strong>\fP specifies the FLASH flags to clear\&. This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
\fBFLASH_FLAG_EOP\fP FLASH End of Operation flag 
.IP "\(bu" 2
\fBFLASH_FLAG_WRPERR\fP FLASH Write protected error flag 
.IP "\(bu" 2
\fBFLASH_FLAG_PGERR\fP FLASH Programming error flag 
.IP "\(bu" 2
\fBFLASH_FLAG_OPTVERR\fP Loaded OB and its complement do not match 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fInone\fP 
.RE
.PP

.SS "#define __HAL_FLASH_DISABLE_IT(__INTERRUPT__)   (\fBFLASH\fP\->CR &= ~(__INTERRUPT__))"

.PP
Disable the specified FLASH interrupt\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>INTERRUPT</strong>\fP FLASH interrupt This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
\fBFLASH_IT_EOP\fP End of FLASH Operation Interrupt 
.IP "\(bu" 2
\fBFLASH_IT_ERR\fP Error Interrupt 
.br
 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fInone\fP 
.RE
.PP

.SS "#define __HAL_FLASH_ENABLE_IT(__INTERRUPT__)   (\fBFLASH\fP\->CR |= (__INTERRUPT__))"

.PP
Enable the specified FLASH interrupt\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>INTERRUPT</strong>\fP FLASH interrupt This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
\fBFLASH_IT_EOP\fP End of FLASH Operation Interrupt 
.IP "\(bu" 2
\fBFLASH_IT_ERR\fP Error Interrupt 
.br
 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fInone\fP 
.RE
.PP

.SS "#define __HAL_FLASH_GET_FLAG(__FLAG__)"
\fBValue:\fP
.PP
.nf
(((__FLAG__) == FLASH_FLAG_OPTVERR) ? \
                                            (FLASH->OBR & FLASH_OBR_OPTERR) : \
                                            (FLASH->SR & (__FLAG__)))
.fi
.PP
Get the specified FLASH flag status\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>FLAG</strong>\fP specifies the FLASH flag to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
\fBFLASH_FLAG_EOP\fP FLASH End of Operation flag 
.IP "\(bu" 2
\fBFLASH_FLAG_WRPERR\fP FLASH Write protected error flag 
.IP "\(bu" 2
\fBFLASH_FLAG_PGERR\fP FLASH Programming error flag 
.IP "\(bu" 2
\fBFLASH_FLAG_BSY\fP FLASH Busy flag 
.IP "\(bu" 2
\fBFLASH_FLAG_OPTVERR\fP Loaded OB and its complement do not match 
.PP
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP new state of \fBFLAG\fP (SET or RESET)\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for lcd_display from the source code\&.
