.TH "GPIO_Exported_Macros" 3 "Thu Oct 29 2020" "lcd_display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GPIO_Exported_Macros
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__HAL_GPIO_EXTI_GET_FLAG\fP(__EXTI_LINE__)   (\fBEXTI\fP\->PR & (__EXTI_LINE__))"
.br
.RI "Checks whether the specified EXTI line flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_GPIO_EXTI_CLEAR_FLAG\fP(__EXTI_LINE__)   (\fBEXTI\fP\->PR = (__EXTI_LINE__))"
.br
.RI "Clears the EXTI's line pending flags\&. "
.ti -1c
.RI "#define \fB__HAL_GPIO_EXTI_GET_IT\fP(__EXTI_LINE__)   (\fBEXTI\fP\->PR & (__EXTI_LINE__))"
.br
.RI "Checks whether the specified EXTI line is asserted or not\&. "
.ti -1c
.RI "#define \fB__HAL_GPIO_EXTI_CLEAR_IT\fP(__EXTI_LINE__)   (\fBEXTI\fP\->PR = (__EXTI_LINE__))"
.br
.RI "Clears the EXTI's line pending bits\&. "
.ti -1c
.RI "#define \fB__HAL_GPIO_EXTI_GENERATE_SWIT\fP(__EXTI_LINE__)   (\fBEXTI\fP\->SWIER |= (__EXTI_LINE__))"
.br
.RI "Generates a Software interrupt on selected EXTI line\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define __HAL_GPIO_EXTI_CLEAR_FLAG(__EXTI_LINE__)   (\fBEXTI\fP\->PR = (__EXTI_LINE__))"

.PP
Clears the EXTI's line pending flags\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>EXTI_LINE</strong>\fP specifies the EXTI lines flags to clear\&. This parameter can be any combination of GPIO_PIN_x where x can be (0\&.\&.15) 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__)   (\fBEXTI\fP\->PR = (__EXTI_LINE__))"

.PP
Clears the EXTI's line pending bits\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>EXTI_LINE</strong>\fP specifies the EXTI lines to clear\&. This parameter can be any combination of GPIO_PIN_x where x can be (0\&.\&.15) 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_GPIO_EXTI_GENERATE_SWIT(__EXTI_LINE__)   (\fBEXTI\fP\->SWIER |= (__EXTI_LINE__))"

.PP
Generates a Software interrupt on selected EXTI line\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>EXTI_LINE</strong>\fP specifies the EXTI line to check\&. This parameter can be GPIO_PIN_x where x can be(0\&.\&.15) 
.RE
.PP
\fBReturn values\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define __HAL_GPIO_EXTI_GET_FLAG(__EXTI_LINE__)   (\fBEXTI\fP\->PR & (__EXTI_LINE__))"

.PP
Checks whether the specified EXTI line flag is set or not\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>EXTI_LINE</strong>\fP specifies the EXTI line flag to check\&. This parameter can be GPIO_PIN_x where x can be(0\&.\&.15) 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP new state of \fBEXTI_LINE\fP (SET or RESET)\&. 
.RE
.PP

.SS "#define __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__)   (\fBEXTI\fP\->PR & (__EXTI_LINE__))"

.PP
Checks whether the specified EXTI line is asserted or not\&. 
.PP
\fBParameters\fP
.RS 4
\fI<strong>EXTI_LINE</strong>\fP specifies the EXTI line to check\&. This parameter can be GPIO_PIN_x where x can be(0\&.\&.15) 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIThe\fP new state of \fBEXTI_LINE\fP (SET or RESET)\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for lcd_display from the source code\&.
