.TH "RCC_APB1_Clock_Enable_Disable" 3 "Thu Oct 29 2020" "lcd_display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RCC_APB1_Clock_Enable_Disable \- Enable or disable the Low Speed APB (APB1) peripheral clock\&.  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__HAL_RCC_TIM2_CLK_ENABLE\fP()"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_TIM3_CLK_ENABLE\fP()"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_WWDG_CLK_ENABLE\fP()"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_USART2_CLK_ENABLE\fP()"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_I2C1_CLK_ENABLE\fP()"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_BKP_CLK_ENABLE\fP()"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_PWR_CLK_ENABLE\fP()"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_TIM2_CLK_DISABLE\fP()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_TIM2EN\fP))"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_TIM3_CLK_DISABLE\fP()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_TIM3EN\fP))"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_WWDG_CLK_DISABLE\fP()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_WWDGEN\fP))"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_USART2_CLK_DISABLE\fP()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_USART2EN\fP))"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_I2C1_CLK_DISABLE\fP()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_I2C1EN\fP))"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_BKP_CLK_DISABLE\fP()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_BKPEN\fP))"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_PWR_CLK_DISABLE\fP()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_PWREN\fP))"
.br
.in -1c
.SH "Detailed Description"
.PP 
Enable or disable the Low Speed APB (APB1) peripheral clock\&. 


.PP
\fBNote\fP
.RS 4
After reset, the peripheral clock (used for registers read/write access) is disabled and the application software has to enable this clock before using it\&. 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define __HAL_RCC_BKP_CLK_DISABLE()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_BKPEN\fP))"

.SS "#define __HAL_RCC_BKP_CLK_ENABLE()"
\fBValue:\fP
.PP
.nf
do { \
                                        __IO uint32_t tmpreg; \
                                        SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN);\
                                        /* Delay after an RCC peripheral clock enabling */\
                                        tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN);\
                                        UNUSED(tmpreg); \
                                      } while(0U)
.fi
.SS "#define __HAL_RCC_I2C1_CLK_DISABLE()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_I2C1EN\fP))"

.SS "#define __HAL_RCC_I2C1_CLK_ENABLE()"
\fBValue:\fP
.PP
.nf
do { \
                                        __IO uint32_t tmpreg; \
                                        SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN);\
                                        /* Delay after an RCC peripheral clock enabling */\
                                        tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN);\
                                        UNUSED(tmpreg); \
                                      } while(0U)
.fi
.SS "#define __HAL_RCC_PWR_CLK_DISABLE()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_PWREN\fP))"

.SS "#define __HAL_RCC_PWR_CLK_ENABLE()"
\fBValue:\fP
.PP
.nf
do { \
                                        __IO uint32_t tmpreg; \
                                        SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);\
                                        /* Delay after an RCC peripheral clock enabling */\
                                        tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);\
                                        UNUSED(tmpreg); \
                                      } while(0U)
.fi
.SS "#define __HAL_RCC_TIM2_CLK_DISABLE()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_TIM2EN\fP))"

.SS "#define __HAL_RCC_TIM2_CLK_ENABLE()"
\fBValue:\fP
.PP
.nf
do { \
                                        __IO uint32_t tmpreg; \
                                        SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN);\
                                        /* Delay after an RCC peripheral clock enabling */\
                                        tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN);\
                                        UNUSED(tmpreg); \
                                      } while(0U)
.fi
.SS "#define __HAL_RCC_TIM3_CLK_DISABLE()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_TIM3EN\fP))"

.SS "#define __HAL_RCC_TIM3_CLK_ENABLE()"
\fBValue:\fP
.PP
.nf
do { \
                                        __IO uint32_t tmpreg; \
                                        SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN);\
                                        /* Delay after an RCC peripheral clock enabling */\
                                        tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN);\
                                        UNUSED(tmpreg); \
                                      } while(0U)
.fi
.SS "#define __HAL_RCC_USART2_CLK_DISABLE()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_USART2EN\fP))"

.SS "#define __HAL_RCC_USART2_CLK_ENABLE()"
\fBValue:\fP
.PP
.nf
do { \
                                        __IO uint32_t tmpreg; \
                                        SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN);\
                                        /* Delay after an RCC peripheral clock enabling */\
                                        tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN);\
                                        UNUSED(tmpreg); \
                                      } while(0U)
.fi
.SS "#define __HAL_RCC_WWDG_CLK_DISABLE()   (\fBRCC\fP\->APB1ENR &= ~(\fBRCC_APB1ENR_WWDGEN\fP))"

.SS "#define __HAL_RCC_WWDG_CLK_ENABLE()"
\fBValue:\fP
.PP
.nf
do { \
                                        __IO uint32_t tmpreg; \
                                        SET_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN);\
                                        /* Delay after an RCC peripheral clock enabling */\
                                        tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN);\
                                        UNUSED(tmpreg); \
                                      } while(0U)
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for lcd_display from the source code\&.
