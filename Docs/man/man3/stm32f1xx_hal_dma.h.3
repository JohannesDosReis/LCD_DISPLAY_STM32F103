.TH "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h" 3 "Thu Oct 29 2020" "lcd_display" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h \- Header file of DMA HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f1xx_hal_def\&.h'\fP
.br
\fC#include 'stm32f1xx_hal_dma_ex\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBDMA_InitTypeDef\fP"
.br
.RI "DMA Configuration Structure definition\&. "
.ti -1c
.RI "struct \fB__DMA_HandleTypeDef\fP"
.br
.RI "DMA handle Structure definition\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_TE\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_NO_XFER\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_TIMEOUT\fP   0x00000020U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_NOT_SUPPORTED\fP   0x00000100U"
.br
.ti -1c
.RI "#define \fBDMA_PERIPH_TO_MEMORY\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_MEMORY_TO_PERIPH\fP   ((uint32_t)\fBDMA_CCR_DIR\fP)"
.br
.ti -1c
.RI "#define \fBDMA_MEMORY_TO_MEMORY\fP   ((uint32_t)\fBDMA_CCR_MEM2MEM\fP)"
.br
.ti -1c
.RI "#define \fBDMA_PINC_ENABLE\fP   ((uint32_t)\fBDMA_CCR_PINC\fP)"
.br
.ti -1c
.RI "#define \fBDMA_PINC_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_MINC_ENABLE\fP   ((uint32_t)\fBDMA_CCR_MINC\fP)"
.br
.ti -1c
.RI "#define \fBDMA_MINC_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_PDATAALIGN_BYTE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_PDATAALIGN_HALFWORD\fP   ((uint32_t)\fBDMA_CCR_PSIZE_0\fP)"
.br
.ti -1c
.RI "#define \fBDMA_PDATAALIGN_WORD\fP   ((uint32_t)\fBDMA_CCR_PSIZE_1\fP)"
.br
.ti -1c
.RI "#define \fBDMA_MDATAALIGN_BYTE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_MDATAALIGN_HALFWORD\fP   ((uint32_t)\fBDMA_CCR_MSIZE_0\fP)"
.br
.ti -1c
.RI "#define \fBDMA_MDATAALIGN_WORD\fP   ((uint32_t)\fBDMA_CCR_MSIZE_1\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NORMAL\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_CIRCULAR\fP   ((uint32_t)\fBDMA_CCR_CIRC\fP)"
.br
.ti -1c
.RI "#define \fBDMA_PRIORITY_LOW\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_PRIORITY_MEDIUM\fP   ((uint32_t)\fBDMA_CCR_PL_0\fP)"
.br
.ti -1c
.RI "#define \fBDMA_PRIORITY_HIGH\fP   ((uint32_t)\fBDMA_CCR_PL_1\fP)"
.br
.ti -1c
.RI "#define \fBDMA_PRIORITY_VERY_HIGH\fP   ((uint32_t)\fBDMA_CCR_PL\fP)"
.br
.ti -1c
.RI "#define \fBDMA_IT_TC\fP   ((uint32_t)\fBDMA_CCR_TCIE\fP)"
.br
.ti -1c
.RI "#define \fBDMA_IT_HT\fP   ((uint32_t)\fBDMA_CCR_HTIE\fP)"
.br
.ti -1c
.RI "#define \fBDMA_IT_TE\fP   ((uint32_t)\fBDMA_CCR_TEIE\fP)"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_GL1\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TC1\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HT1\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TE1\fP   0x00000008U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_GL2\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TC2\fP   0x00000020U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HT2\fP   0x00000040U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TE2\fP   0x00000080U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_GL3\fP   0x00000100U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TC3\fP   0x00000200U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HT3\fP   0x00000400U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TE3\fP   0x00000800U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_GL4\fP   0x00001000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TC4\fP   0x00002000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HT4\fP   0x00004000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TE4\fP   0x00008000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_GL5\fP   0x00010000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TC5\fP   0x00020000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HT5\fP   0x00040000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TE5\fP   0x00080000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_GL6\fP   0x00100000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TC6\fP   0x00200000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HT6\fP   0x00400000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TE6\fP   0x00800000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_GL7\fP   0x01000000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TC7\fP   0x02000000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HT7\fP   0x04000000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TE7\fP   0x08000000U"
.br
.ti -1c
.RI "#define \fB__HAL_DMA_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_DMA_STATE_RESET\fP)"
.br
.RI "Reset DMA handle state\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_ENABLE\fP(__HANDLE__)   (\fBSET_BIT\fP((__HANDLE__)\->Instance\->CCR, \fBDMA_CCR_EN\fP))"
.br
.RI "Enable the specified DMA Channel\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_DISABLE\fP(__HANDLE__)   (\fBCLEAR_BIT\fP((__HANDLE__)\->Instance\->CCR, \fBDMA_CCR_EN\fP))"
.br
.RI "Disable the specified DMA Channel\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   (\fBSET_BIT\fP((__HANDLE__)\->Instance\->CCR, (__INTERRUPT__)))"
.br
.RI "Enables the specified DMA Channel interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   (\fBCLEAR_BIT\fP((__HANDLE__)\->Instance\->CCR , (__INTERRUPT__)))"
.br
.RI "Disable the specified DMA Channel interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_IT_SOURCE\fP(__HANDLE__,  __INTERRUPT__)   ((((__HANDLE__)\->Instance\->CCR & (__INTERRUPT__)) == (__INTERRUPT__)) ? \fBSET\fP : \fBRESET\fP)"
.br
.RI "Check whether the specified DMA Channel interrupt is enabled or not\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_COUNTER\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CNDTR)"
.br
.RI "Return the number of remaining data units in the current DMA Channel transfer\&. "
.ti -1c
.RI "#define \fBIS_DMA_DIRECTION\fP(DIRECTION)"
.br
.ti -1c
.RI "#define \fBIS_DMA_BUFFER_SIZE\fP(SIZE)   (((SIZE) >= 0x1U) && ((SIZE) < 0x10000U))"
.br
.ti -1c
.RI "#define \fBIS_DMA_PERIPHERAL_INC_STATE\fP(STATE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_MEMORY_INC_STATE\fP(STATE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_PERIPHERAL_DATA_SIZE\fP(SIZE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_MEMORY_DATA_SIZE\fP(SIZE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_MODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_PRIORITY\fP(PRIORITY)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB__DMA_HandleTypeDef\fP \fBDMA_HandleTypeDef\fP"
.br
.RI "DMA handle Structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBHAL_DMA_StateTypeDef\fP { \fBHAL_DMA_STATE_RESET\fP = 0x00U, \fBHAL_DMA_STATE_READY\fP = 0x01U, \fBHAL_DMA_STATE_BUSY\fP = 0x02U, \fBHAL_DMA_STATE_TIMEOUT\fP = 0x03U }"
.br
.RI "HAL DMA State structures definition\&. "
.ti -1c
.RI "enum \fBHAL_DMA_LevelCompleteTypeDef\fP { \fBHAL_DMA_FULL_TRANSFER\fP = 0x00U, \fBHAL_DMA_HALF_TRANSFER\fP = 0x01U }"
.br
.RI "HAL DMA Error Code structure definition\&. "
.ti -1c
.RI "enum \fBHAL_DMA_CallbackIDTypeDef\fP { \fBHAL_DMA_XFER_CPLT_CB_ID\fP = 0x00U, \fBHAL_DMA_XFER_HALFCPLT_CB_ID\fP = 0x01U, \fBHAL_DMA_XFER_ERROR_CB_ID\fP = 0x02U, \fBHAL_DMA_XFER_ABORT_CB_ID\fP = 0x03U, \fBHAL_DMA_XFER_ALL_CB_ID\fP = 0x04U }"
.br
.RI "HAL DMA Callback ID structure definition\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Init\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_DeInit\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Start\fP (\fBDMA_HandleTypeDef\fP *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Start_IT\fP (\fBDMA_HandleTypeDef\fP *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Abort\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Abort_IT\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_PollForTransfer\fP (\fBDMA_HandleTypeDef\fP *hdma, uint32_t CompleteLevel, uint32_t Timeout)"
.br
.ti -1c
.RI "void \fBHAL_DMA_IRQHandler\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_RegisterCallback\fP (\fBDMA_HandleTypeDef\fP *hdma, \fBHAL_DMA_CallbackIDTypeDef\fP CallbackID, void(*pCallback)(\fBDMA_HandleTypeDef\fP *_hdma))"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_UnRegisterCallback\fP (\fBDMA_HandleTypeDef\fP *hdma, \fBHAL_DMA_CallbackIDTypeDef\fP CallbackID)"
.br
.ti -1c
.RI "\fBHAL_DMA_StateTypeDef\fP \fBHAL_DMA_GetState\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "uint32_t \fBHAL_DMA_GetError\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Header file of DMA HAL module\&. 


.PP
\fBAuthor\fP
.RS 4
MCD Application Team 
.RE
.PP
\fBAttention\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2016 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.SH "Author"
.PP 
Generated automatically by Doxygen for lcd_display from the source code\&.
